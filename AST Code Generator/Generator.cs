using System;
using System.Collections.Generic;
using System.IO;

namespace AST_Code_Generator
{
    //  Example code
    //public interface IExpr
    //{
    //    public interface IVisitor<T>
    //    {
    //        T VisitBinaryExpr(Binary expr);
    //    }

    //    T Accept<T>(IVisitor<T> visitor);

    //    public struct Binary : IExpr
    //    {
    //        public readonly IExpr left;
    //        public readonly object @operator;
    //        public readonly IExpr right;

    //        public Binary(IExpr left, object @operator, IExpr right)
    //        {
    //            this.left = left;
    //            this.@operator = @operator;
    //            this.right = right;
    //        }

    //        public T Accept<T>(IVisitor<T> visitor)
    //        {
    //            return visitor.VisitBinaryExpr(this);
    //        }
    //    }
    //}



    static class Generator
    {
        const string TAB = @"    ";
        const string TAB2 = TAB + TAB;
        const string TAB3 = TAB2 + TAB;
        const string TAB4 = TAB2 + TAB2;

        const string VISITOR_FUNC = "T Accept<T>(IVisitor<T> visitor)";

        const string GEN_WARNING =
@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";

        static void Main(string[] args)
        {
            if (args.Length != 1)
            {
                Console.WriteLine("Usage: ast-gen <output-directory>");
                Environment.Exit(1);
            }

            DefineAST(args[0], "Expr", new string[]
            {
                "Binary   : Expr left, Token @operator, Expr right",
                "Grouping : Expr expression",
                "Literal  : Object value",
                "Unary    : Token @operator, Expr right"
            });

            Console.WriteLine("Completed!");
        }

        static void DefineAST(string outputDir, string baseName, string[] types)
        {
            string path = Path.Join(outputDir, "I" + baseName + ".cs");
            Directory.CreateDirectory(outputDir);

            using StreamWriter sw = File.CreateText(path);

            sw.WriteLine(GEN_WARNING);
            sw.WriteLine();
            
            sw.WriteLine("using System;");
            sw.WriteLine();
            
            sw.WriteLine("namespace Jox.Parsing.AST");
            sw.WriteLine("{");
            sw.WriteLine(TAB + "public interface I" + baseName);
            sw.WriteLine(TAB + "{");

            DefineVisitor(sw, baseName, types);

            //  Base Accept method
            sw.WriteLine();
            sw.WriteLine(TAB2 + VISITOR_FUNC + ";");
            sw.WriteLine();


            //  Gen AST Classes
            foreach (string t in types)
            {
                string name = t.Split(":")[0].Trim();
                string fields = t.Split(":")[1].Trim().Replace(baseName, "I"+baseName);

                DefineType(sw, baseName, name, fields);
                sw.WriteLine();
            }

            sw.WriteLine(TAB + "}");
            sw.WriteLine("}");
        }

        private static void DefineVisitor(StreamWriter sw, string baseName, string[] types)
        {
            sw.WriteLine(TAB2 + "public interface IVisitor<T>");
            sw.WriteLine(TAB2 + "{");

            foreach(var t in types)
            {
                var tName = t.Split(":")[0].Trim();
                sw.WriteLine(TAB3 + $"T Visit{tName}{baseName}({tName} {baseName.ToLower()});");
            }

            sw.WriteLine(TAB2 + "}");
        }

        static void DefineType(StreamWriter sw, string baseName, string name, string fieldList)
        {
            sw.WriteLine(TAB2 + $"public struct {name} : I{baseName}");
            sw.WriteLine(TAB2 + "{");
            
            //  Fields
            foreach(string f in fieldList.Split(", "))
                sw.WriteLine(TAB3 + "public " + f + ";");

            sw.WriteLine();
            
            //  Constructor
            sw.WriteLine(TAB3 + $"public {name}({fieldList})");
            sw.WriteLine(TAB3 + "{");

            foreach (string f in fieldList.Split(", "))
            {
                string fname = f.Split(" ")[1];
                sw.WriteLine(TAB4 + $"this.{fname} = {fname};");
            }

            sw.WriteLine(TAB3 + "}");


            sw.WriteLine();
            sw.WriteLine(TAB3 + "public " + VISITOR_FUNC);
            sw.WriteLine(TAB3 + "{");

            sw.WriteLine(TAB4 + "return visitor.Visit" + name + baseName + "(this);");
            
            sw.WriteLine(TAB3 + "}");

            sw.WriteLine(TAB2 + "}");
        }
    }
}



