//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Jox.Parsing.AST
{
    public interface IExpr
    {
        public interface IVisitor<T>
        {
            T VisitAssignExpr(Assign expr);
            T VisitBinaryExpr(Binary expr);
            T VisitGroupingExpr(Grouping expr);
            T VisitLiteralExpr(Literal expr);
            T VisitUnaryExpr(Unary expr);
            T VisitVariableExpr(Variable expr);
        }

        T Accept<T>(IVisitor<T> visitor);

        public struct Assign : IExpr
        {
            public Token ident;
            public IExpr value;

            public Assign(Token ident, IExpr value)
            {
                this.ident = ident;
                this.value = value;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitAssignExpr(this);
            }
        }

        public struct Binary : IExpr
        {
            public IExpr left;
            public Token @operator;
            public IExpr right;

            public Binary(IExpr left, Token @operator, IExpr right)
            {
                this.left = left;
                this.@operator = @operator;
                this.right = right;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitBinaryExpr(this);
            }
        }

        public struct Grouping : IExpr
        {
            public IExpr expression;

            public Grouping(IExpr expression)
            {
                this.expression = expression;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitGroupingExpr(this);
            }
        }

        public struct Literal : IExpr
        {
            public Object value;

            public Literal(Object value)
            {
                this.value = value;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitLiteralExpr(this);
            }
        }

        public struct Unary : IExpr
        {
            public Token @operator;
            public IExpr right;

            public Unary(Token @operator, IExpr right)
            {
                this.@operator = @operator;
                this.right = right;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitUnaryExpr(this);
            }
        }

        public struct Variable : IExpr
        {
            public Token ident;

            public Variable(Token ident)
            {
                this.ident = ident;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitVariableExpr(this);
            }
        }

    }
}
