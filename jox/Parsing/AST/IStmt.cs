//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Jox.Parsing.AST
{
    public interface IStmt
    {
        public interface IVisitor<T>
        {
            T VisitExpressionStmt(Expression stmt);
            T VisitPrintStmt(Print stmt);
            T VisitVarStmt(Var stmt);
            T VisitBlockStmt(Block stmt);
        }

        T Accept<T>(IVisitor<T> visitor);

        public struct Expression : IStmt
        {
            public IExpr expression;

            public Expression(IExpr expression)
            {
                this.expression = expression;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitExpressionStmt(this);
            }
        }

        public struct Print : IStmt
        {
            public IExpr expression;

            public Print(IExpr expression)
            {
                this.expression = expression;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitPrintStmt(this);
            }
        }

        public struct Var : IStmt
        {
            public Token ident;
            public IExpr initializer;

            public Var(Token ident, IExpr initializer)
            {
                this.ident = ident;
                this.initializer = initializer;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitVarStmt(this);
            }
        }

        public struct Block : IStmt
        {
            public List<IStmt> statements;

            public Block(List<IStmt> statements)
            {
                this.statements = statements;
            }

            public T Accept<T>(IVisitor<T> visitor)
            {
                return visitor.VisitBlockStmt(this);
            }
        }

    }
}
